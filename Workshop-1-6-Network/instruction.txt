For this workshop. We need you to deploy NGINX for load balance and reverse proxy
================================================================================
Part1: Reverse Proxy by DNS
================================================================================
1. Pull image nginx with command: 			"docker image pull labdocker/nginx:labnetworkhttp2"
2. Pull image nodejs (web1) with command:	"docker image pull labdocker/alpineweb:web1"
3. Pull image nodejs (web2) with command:	"docker image pull labdocker/alpineweb:web2"
4. Create Public Network with command:
	docker network create --driver bridge \
--subnet=192.168.100.0/24 --ip-range=192.168.100.128/25 \
--gateway=192.168.100.5 --opt="com.docker.network.mtu"="1500" webpublic

	docker network create --driver bridge \
--subnet=192.168.101.0/24 --ip-range=192.168.101.128/25 \
--gateway=192.168.101.5 --opt="com.docker.network.mtu"="9000" webinternal

5. Run container web1 & web2 with command:
	docker container run -dt --name web1 --network webinternal --net-alias web1 labdocker/alpineweb:web1 node hello.js
	docker container run -dt --name web2 --network webinternal --net-alias web2 labdocker/alpineweb:web2 node hello.js

6. Run container nginx and attach network 
	docker container run -dt --name nginx --network webinternal -p 80:8080 -p 443:8443 labdocker/nginx:labnetworkhttp2
	docker network connect webpublic nginx

7. Open url: 
			curl http://ifconfig.me
			http://<public ip>/nodejs
			https://<public ip>/nodejs

	* from command line: 
			curl http://<public ip>/nodejs -v
			curl https://<public ip>/nodejs -v -k 

8. Shell to nginx and test curl to nodejs with command below:
	docker container exec -it nginx sh
	curl http://web1:3000
	curl http://web1:3000 -I
	curl http://web2:3000
	curl http://web2:3000 -I

9. Stop and remove nginx load balance by command:
	docker container stop nginx && docker container rm nginx

10. Start Kong api gateway by command:
	10.1 Prepare space for kong apigateway by command:
	  mkdir ~/kong
    mkdir ~/kong/postgres
    mkdir ~/kong/kong-configuration

  *Remark: Case repeat workshop on no 10
    sudo rm -rf ~/kong
    mkdir ~/kong
    mkdir ~/kong/postgres
    mkdir ~/kong/kong-configuration

	10.2 Create database by command:
	docker image pull labdocker/postgres:16.1-alpine3.17
	docker container run -dt --name kong-database \
    --network=webinternal -p 5432:5432 \
    --mount type=bind,source=/home/ubuntu/kong/postgres,target=/var/lib/postgresql/data \
    -e "POSTGRES_USER=kong" -e "POSTGRES_DB=kong" -e "POSTGRES_PASSWORD=kong" \
    labdocker/postgres:16.1-alpine3.17

	10.3 Initial database for kong by command:
  docker image pull kong:latest
	docker container run --rm \
     --network=webinternal \
     -e "KONG_DATABASE=postgres" \
     -e "KONG_PG_HOST=kong-database" \
     -e "KONG_PG_PASSWORD=kong" \
     -e "KONG_PG_USER=kong" \
     -e "KONG_PG_DATABASE=kong" \
     labdocker/kong:3.5.0 kong migrations bootstrap

	10.4 Run kong api gateway by command:
	docker container run -d --name kong \
     --network=webinternal \
     -e "KONG_DATABASE=postgres" \
     -e "KONG_PG_HOST=kong-database" \
     -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" \
     -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" \
     -e "KONG_PROXY_ERROR_LOG=/dev/stderr" \
     -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" \
     -e "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl" \
     -e "KONG_PG_PASSWORD=kong" \
     -e "KONG_PG_USER=kong" \
     -e "KONG_PG_DATABASE=kong" \
     -p 80:8000 \
     -p 443:8444 \
     -p 8001:8001 \
     -p 8002:8002 \
     -p 8003:8003 \
     -p 8004:8004 \
     labdocker/kong:3.5.0

	*Remark: 
	:8000 Default API Proxy Port
	:8001 Default API Admin Port
  :8002 Default Manager Port
	:8003 Default DevPortal Port
  :8004 Default Files Port

	10.5 Install PGAdmin by command:
	  docker image pull labdocker/pgadmin4:8.0
    docker container run -p 8080:80 --name pgadmin \
	--network=webinternal -e "PGADMIN_DEFAULT_EMAIL=kong@localdomain.com" \
    -e "PGADMIN_DEFAULT_PASSWORD=kong" -d labdocker/pgadmin4:8.0

	10.7 (local) Test open GUI:
	http://<public ip>:8080		==> PGAdmin (Email Address: kong@localdomain.com, Password: kong) ==> Add Server: <private ip>, username: kong, password:kong
	http://<public ip>:8002		==> Konga (Username: kongadmin, Email Address: kong@localdomain.com, Password: P@ssw0rd) ==> Connect Kong: Name KONG, Kong Admin URL: http://<private ip>:8001
	
	10.8 Test kong api (cli):
	curl http://localhost:8001

11 Create upstream server for load balance between web1, web2 by command:
  curl -i -X POST \
  --url http://localhost:8001/upstreams/ \
  --data 'name=upstream-webtestthailand' \
  --data 'hash_on=none' \
  --data 'hash_fallback=none' \
  --data 'slots=100' \
  --data 'healthchecks.active.http_path=/' \
  --data 'healthchecks.active.timeout=1' \
  --data 'healthchecks.active.healthy.interval=5' \
  --data 'healthchecks.active.type=http'

  curl -i -X POST \
  --url http://localhost:8001/upstreams/upstream-webtestthailand/targets \
  --data 'target=web1:3000' \
  --data 'weight=100'

  curl -i -X POST \
  --url http://localhost:8001/upstreams/upstream-webtestthailand/targets \
  --data 'target=web2:3000' \
  --data 'weight=100'

12 Create service for receive request and set to upstream by command:
curl -i -X POST \
  --url http://localhost:8001/services/ \
  --data 'name=service-webtestthailand' \
  --data 'retries=5' \
  --data 'protocol=http' \
  --data 'host=upstream-webtestthailand' \
  --data 'port=80' \
  --data 'path=/'

13. Create route for accept traffic from outside ("webtestthailand.com") to service by command:
curl -i -X POST \
  --url http://localhost:8001/services/service-webtestthailand/routes \
  --data 'name=route-webtestthailand' \
  --data 'hosts[]=webtestthailand.com' \
  --data 'protocols=http' \
  --data 'paths=/nodejs' \
  --data 'strip_path=true'

14. Open curl for test
	curl -i -X GET \
  --url http://<public ip/private ip>/nodejs --header 'Host: webtestthailand.com' -k

15. Enable authentication via api-key by command:
	curl -i -X POST \
  --url http://localhost:8001/services/service-webtestthailand/plugins/ \
  --data 'name=key-auth'

	curl -i -X POST \
  --url http://localhost:8001/consumers/ \
  --data "username=public1"

	curl -i -X POST \
  --url http://localhost:8001/consumers/public1/key-auth/ \
  --data 'key=thisisfirsttestapikeypublic112345678'

16. Test curl again with and without api-key:

	Without API-Key:
	curl -i -X GET \
  --url http://<public ip/private ip>/nodejs --header 'Host: webtestthailand.com' -k

	With API-Key:
	curl -i -X GET \
  --url http://<public ip/private ip>/nodejs --header 'Host: webtestthailand.com' --header "apikey: thisisfirsttestapikeypublic112345678" -k

17. Clean up container with command:
	docker container stop web1 web2 konga kong kong-database pgadmin
	docker container rm web1 web2 konga kong kong-database pgadmin
	docker network rm webpublic webinternal
	sudo rm -rf ~/kong

================================================================================
DEMO: Reverse Proxy by DNS with MACVLAN (DEMO from Instructor)
Note: If you need to join this lab. You need to install docker-machine over oracle virtualbox on MAC OS X
================================================================================
1. Pull image with command: 		
	docker image pull labdocker/nginx:labnetworkhttp2
  docker image pull labdocker/alpineweb:web1
  docker image pull labdocker/alpineweb:web2

2. Check and Locate Network Card by command:
	ifconfig / ip addr

3. Create Network for MACVLAN by command: (This example: will extract 192.168.57.193 - 192.168.57.206 for macvlan)
	docker network create -d macvlan --subnet=192.168.57.0/24 --ip-range=192.168.57.192/28 --gateway=192.168.57.1 -o parent=enp0s8 macvlanlab

4. Run container for web1, web2 and nginx by command:
	docker container run -dt --name web1 --network macvlanlab --ip 192.168.57.193 --net-alias web1  labdocker/alpineweb:web1 node hello.js
	
	docker container run -dt --name web2 --network macvlanlab --ip 192.168.57.194 --net-alias web2 labdocker/alpineweb:web2 node hello.js

	docker container run -dt --name nginx --network macvlanlab --ip 192.168.57.195 --net-alias nginx labdocker/nginx:labnetworkhttp2

4. On virtualbox: Set Property of Network Card for promiscuous mode
and configure nic card for promiscuous mode via command:
	sudo ip link set dev enp0s8 promisc on

5. Test internal container connection by command:
	docker container exec -it nginx curl http://web1:3000
	docker container exec -it nginx curl http://web1:3000 -I
	docker container exec -it nginx curl http://web2:3000
	docker container exec -it nginx curl http://web2:3000 -I
	docker container exec -it nginx ping web1
	docker container exec -it nginx ping web2

6. Test connect from outside by command: (Operate on teacher macbook)
	ping 192.168.57.193
	ping 192.168.57.194
	ping 192.168.57.195
	curl http://192.168.57.193:3000 -v
	curl http://192.168.57.194:3000 -v
	curl http://192.168.57.195:8080 -v
	curl https://192.168.57.195:8443 -v -k

7. Test open url for access by command:
	http://192.168.57.195:8080/					==> via NGINX
	http://192.168.57.195:8080/nodejs			==> via NGINX
	https://192.168.57.195:8443					==> via NGINX
	https://192.168.57.195:8443/nodejs			==> via NGINX
	http://192.168.57.193:3000/					==> Native NODEJS1
	http://192.168.57.194:3000/					==> Native NODEJS2

9. Clean Up Lab by command:
	docker container stop nginx web1 web2
	docker container rm nginx web1 web2
	docker network rm macvlanlab